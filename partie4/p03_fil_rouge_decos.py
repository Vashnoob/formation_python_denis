
## âœ… ** DÃ©corateur de debug/log**

### ğŸ”§ Le dÃ©corateur `debug_log` :
def debug_log(fonction):
    def wrapper(*args, **kwargs):
        # TODO
        resultat = fonction(*args, **kwargs)
        # TODO
        return resultat
    return wrapper

class SystemeReservation:
    def __init__(self):
        self.trajets = []
        self.utilisateurs = []

    # TODO
    def ajouter_trajet(self, trajet):
        self.trajets.append(trajet)

    # TODO
    def enregistrer_utilisateur(self, utilisateur):
        self.utilisateurs.append(utilisateur)

# ğŸ§  Ce dÃ©corateur tâ€™aide Ã  tracer ce qui se passe sans polluer ton code mÃ©tier.*



## âœ… ** ContrÃ´le de doublon de rÃ©servation**
## On veut Ã©viter que le mÃªme trajet soit rÃ©servÃ© plusieurs fois par un utilisateur.

def unique_reservation(fonction):
    def wrapper(self, trajet):
        if trajet in self._reservations:
            print("â›” Trajet dÃ©jÃ  rÃ©servÃ©.")
            return
        return fonction(self, trajet)
    return wrapper

class Utilisateur:
    def __init__(self, nom):
        self.nom = nom
        self.reservations = []

    # TODO
    def reserver(self, trajet):
        self.reservations.append(trajet)
# ğŸ§  Ce dÃ©corateur isole la logique de validation sans surcharger la mÃ©thode principale.*

"""
- Ils **sÃ©parent les prÃ©occupations** : logs, validation, performance...
- Ils permettent de **factoriser du comportement** commun sans duplication.
- Ils rendent le code **plus lisible** et modulaire.
"""
