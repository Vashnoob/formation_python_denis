# ğŸ§± Ã‰tape 1 : la Factory

from trajet import Trajet
from trajet_express import TrajetExpress

class TrajetFactory:
    @staticmethod
    def creer_trajet(type_, depart, arrivee, distance):
        type_ = type_.lower()
        if type_ == "express":
            return TrajetExpress(depart, arrivee, distance)
        elif type_ == "normal":
            return Trajet(depart, arrivee, distance)
        else:
            raise ValueError(f"Type de trajet inconnu : {type_}")


# ğŸ§ª Ã‰tape 2 : Utilisation dans le code
from factory import TrajetFactory

# EntrÃ©es utilisateur simulÃ©es
type_trajet = "express"
depart = "Paris"
arrivee = "Lyon"
distance = 460

# CrÃ©ation via la fabrique
trajet = TrajetFactory.creer_trajet(type_trajet, depart, arrivee, distance)
print(trajet)

"""
âœ… Avantages
Le code client nâ€™a pas besoin de connaÃ®tre les classes Trajet ou TrajetExpress.
Ajout dâ€™un type futur (ex : TrajetÃ‰cologique) sans modifier le reste du programme.
Bon point de dÃ©part pour introduire des inputs utilisateur ou des interfaces graphiques.
"""